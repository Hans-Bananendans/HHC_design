# -*- coding: utf-8 -*-
"""
Created on Tue Oct  3 14:19:38 2023

@author: Main
"""

from hhc_classes import PowerSupply, HHCoil
import numpy as np
import matplotlib.pyplot as plt


#%% Coil parameters
N_windings = 83
sidelength_coil = [1.85, 1.95, 2.05] # [m] X,Y,Z
width_coil = 0.019 # [m] Coil thickness (from Poppenk2009)
Rcoils = [6.27, 6.85, 6.92]  # Ohm

supply = PowerSupply(60, 5, 0.86, 1)

coilX = HHCoil(sidelength_coil[0],
               width_coil,
               N_windings,
               0,
               0,
               supply
               )
coilX.set_R(Rcoils[0])

def get_Vx_ref(Bref, Q, n=83, slope=1, offset=0):
    return (2/5E-7) * Bref / (n * Q)

def I_supply(V_in):
    return 5/2 * abs(V_in)

def H_Bridge(V_in):
    return V_in/abs(V_in)

def fI_coil(I_in, sign):
    return I_in * sign

def fB_coil(I_in, Q, n=83):
    return 1E-7 * n * I_in / Q

def V_sensor(B):
    if B > 200E-6:
        return 2.0
    if B < -200-6:
        return -2.0
    else:
        return B/100*1E6

def B_sensor(V_sensor):
    return V_sensor * 1E-6 * 100

#%% Simulation configuration

t0 = 0
tmax = 1
dt = 0.01
t=0
i=0

Bx = 0
Bx_ref = 175E-6
Vc = 0

Vprev = 0

[KP, KI, KD] = [20, 0, 0.1]

#%% Pre-allocate data vectors
ldata = int((tmax-t0)/dt)
data_t = np.zeros(ldata)
data_Bx = np.zeros(ldata)
data_Vc = np.zeros(ldata)
data_Bx_ref = np.zeros(ldata)


#%% Loop
while t <= tmax:
    # Calculate the B error
    Bx_e = Bx_ref - Bx
    
    # Store data
    data_t[i] = t
    data_Bx[i] = Bx
    data_Vc[i] = Vc
    data_Bx_ref[i] = Bx_ref
    
    
    # Calculate the corresponding V error
    Ve = get_Vx_ref(Bx_e, coilX.Q)
    
    # Compute control voltage Vc
    VP = KP * Ve
    VI = 0
    VD = KD * (Ve - Vprev) / dt
    
    Vc = VP + VI + VD
    
    # Calculate the power coming out of the power supplies at Vc
    I_coil = fI_coil(I_supply(Vc), H_Bridge(Vc))
    
    # Return the magnetic field generated by the coils
    B_coil = fB_coil(I_coil, coilX.Q)
    
    Bx = B_sensor(V_sensor(B_coil))
    
    Vprev = Ve
    i += 1
    t += dt
    
    
#%% Plotting

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(13,7))
ax1.axhline(0, color='k')
ax2.axhline(0, color='k')

# B plots
ax1.plot(data_t, data_Bx_ref, c="cyan", label="B_ref")
ax1.plot(data_t, data_Bx, "#C00", label="B_coil")

# V plots
ax2.plot(data_t, data_Vc, "#00F", label="V_control")

# Labels
ax1.set_xlabel("Time [s]")
ax1.set_ylabel("Magnetic field [T]")
ax1.legend(loc="lower right")
plot_title="Control envelope"

fig.suptitle(plot_title)